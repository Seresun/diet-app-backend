{
  "info": {
    "name": "Diet API Audit Collection",
    "description": "Comprehensive API audit for Diet Backend - testing all endpoints, status codes, and response structures",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "GET /api - Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}",
              "host": ["{{baseUrl}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 2000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test(\"Response is not empty\", function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Diagnoses",
      "item": [
        {
          "name": "GET /api/diagnoses - All Diagnoses",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/diagnoses",
              "host": ["{{baseUrl}}"],
              "path": ["diagnoses"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is JSON array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Each diagnosis has required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const diagnosis = jsonData[0];",
                  "        pm.expect(diagnosis).to.have.property('id');",
                  "        pm.expect(diagnosis).to.have.property('code');",
                  "        pm.expect(diagnosis).to.have.property('description');",
                  "        pm.expect(diagnosis).to.have.property('recommendedCalories');",
                  "        pm.expect(diagnosis).to.have.property('foods');",
                  "        pm.expect(diagnosis).to.have.property('dailyPlans');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Recommended calories structure is correct\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const calories = jsonData[0].recommendedCalories;",
                  "        pm.expect(calories).to.have.property('min');",
                  "        pm.expect(calories).to.have.property('max');",
                  "        pm.expect(calories).to.have.property('unit');",
                  "        pm.expect(calories.unit).to.eql('kcal');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /api/diagnoses/:code - Diagnosis by Code (Valid)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/diagnoses/balanced_diet_general",
              "host": ["{{baseUrl}}"],
              "path": ["diagnoses", "balanced_diet_general"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is JSON object\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "});",
                  "",
                  "pm.test(\"Diagnosis has correct code\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql('balanced_diet_general');",
                  "});",
                  "",
                  "pm.test(\"Diagnosis has all required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('code');",
                  "    pm.expect(jsonData).to.have.property('description');",
                  "    pm.expect(jsonData).to.have.property('recommendedCalories');",
                  "    pm.expect(jsonData).to.have.property('foods');",
                  "    pm.expect(jsonData).to.have.property('dailyPlans');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /api/diagnoses/:code - Diagnosis by Code (Not Found)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/diagnoses/nonexistent_diagnosis",
              "host": ["{{baseUrl}}"],
              "path": ["diagnoses", "nonexistent_diagnosis"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error message is present\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('not found');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /api/diagnoses/id/:id - Diagnosis by ID (Valid)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/diagnoses/id/1",
              "host": ["{{baseUrl}}"],
              "path": ["diagnoses", "id", "1"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is JSON object\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "});",
                  "",
                  "pm.test(\"Diagnosis has correct ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.eql(1);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /api/diagnoses/id/:id - Diagnosis by ID (Not Found)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/diagnoses/id/999999",
              "host": ["{{baseUrl}}"],
              "path": ["diagnoses", "id", "999999"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error message is present\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('not found');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Foods",
      "item": [
        {
          "name": "GET /api/foods - All Foods",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/foods",
              "host": ["{{baseUrl}}"],
              "path": ["foods"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is JSON array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Each food has required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const food = jsonData[0];",
                  "        pm.expect(food).to.have.property('id');",
                  "        pm.expect(food).to.have.property('code');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /api/foods/code/:code - Food by Code (Valid)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/foods/code/vegetables",
              "host": ["{{baseUrl}}"],
              "path": ["foods", "code", "vegetables"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Food has correct code\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql('vegetables');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /api/foods/code/:code - Food by Code (Not Found)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/foods/code/nonexistent_food",
              "host": ["{{baseUrl}}"],
              "path": ["foods", "code", "nonexistent_food"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /api/foods/:id - Food by ID (Valid)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/foods/1",
              "host": ["{{baseUrl}}"],
              "path": ["foods", "1"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Food has correct ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.eql(1);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /api/foods/:id - Food by ID (Not Found)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/foods/999999",
              "host": ["{{baseUrl}}"],
              "path": ["foods", "999999"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Daily Plans",
      "item": [
        {
          "name": "GET /api/daily-plan - All Daily Plans",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/daily-plan",
              "host": ["{{baseUrl}}"],
              "path": ["daily-plan"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is JSON array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Each daily plan has required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const plan = jsonData[0];",
                  "        pm.expect(plan).to.have.property('id');",
                  "        pm.expect(plan).to.have.property('diagnosisId');",
                  "        pm.expect(plan).to.have.property('time');",
                  "        pm.expect(plan).to.have.property('mealKey');",
                  "        pm.expect(plan).to.have.property('weightGrams');",
                  "        pm.expect(plan).to.have.property('calories');",
                  "        pm.expect(plan).to.have.property('proteins');",
                  "        pm.expect(plan).to.have.property('fats');",
                  "        pm.expect(plan).to.have.property('carbs');",
                  "        pm.expect(plan).to.have.property('ingredients');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /api/daily-plan/:diagnosisId - Daily Plan by Diagnosis ID (Valid)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/daily-plan/1",
              "host": ["{{baseUrl}}"],
              "path": ["daily-plan", "1"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('code');",
                  "    pm.expect(jsonData).to.have.property('recommendedCalories');",
                  "    pm.expect(jsonData).to.have.property('allowedFoods');",
                  "    pm.expect(jsonData).to.have.property('prohibitedFoods');",
                  "    pm.expect(jsonData).to.have.property('dailyPlan');",
                  "});",
                  "",
                  "pm.test(\"Recommended calories structure is correct\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const calories = jsonData.recommendedCalories;",
                  "    pm.expect(calories).to.have.property('min');",
                  "    pm.expect(calories).to.have.property('max');",
                  "    pm.expect(calories).to.have.property('unit');",
                  "    pm.expect(calories.unit).to.eql('kcal');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /api/daily-plan/:diagnosisId - Daily Plan by Diagnosis ID (Not Found)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/daily-plan/999999",
              "host": ["{{baseUrl}}"],
              "path": ["daily-plan", "999999"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error message is present\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('not found');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /api/daily-plan/id/:id - Daily Plan by ID (Valid)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/daily-plan/id/1",
              "host": ["{{baseUrl}}"],
              "path": ["daily-plan", "id", "1"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('code');",
                  "    pm.expect(jsonData).to.have.property('recommendedCalories');",
                  "    pm.expect(jsonData).to.have.property('allowedFoods');",
                  "    pm.expect(jsonData).to.have.property('prohibitedFoods');",
                  "    pm.expect(jsonData).to.have.property('dailyPlan');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /api/daily-plan/id/:id - Daily Plan by ID (Not Found)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/daily-plan/id/999999",
              "host": ["{{baseUrl}}"],
              "path": ["daily-plan", "id", "999999"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error message is present\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('not found');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Diagnosis-Food Relations",
      "item": [
        {
          "name": "GET /api/diagnosis-food-relations - All Relations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/diagnosis-food-relations",
              "host": ["{{baseUrl}}"],
              "path": ["diagnosis-food-relations"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is JSON array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Each relation has required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const relation = jsonData[0];",
                  "        pm.expect(relation).to.have.property('diagnosisId');",
                  "        pm.expect(relation).to.have.property('foodId');",
                  "        pm.expect(relation).to.have.property('allowed');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /api/diagnosis-food-relations/diagnosis/:diagnosisId - Relations by Diagnosis",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/diagnosis-food-relations/diagnosis/1",
              "host": ["{{baseUrl}}"],
              "path": ["diagnosis-food-relations", "diagnosis", "1"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is JSON array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /api/diagnosis-food-relations/food/:foodId - Relations by Food",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/diagnosis-food-relations/food/1",
              "host": ["{{baseUrl}}"],
              "path": ["diagnosis-food-relations", "food", "1"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is JSON array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /api/diagnosis-food-relations/diagnosis/:diagnosisId/allowed - Allowed Foods",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/diagnosis-food-relations/diagnosis/1/allowed",
              "host": ["{{baseUrl}}"],
              "path": ["diagnosis-food-relations", "diagnosis", "1", "allowed"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is JSON array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"All relations are allowed\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    jsonData.forEach(relation => {",
                  "        pm.expect(relation.allowed).to.be.true;",
                  "    });",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /api/diagnosis-food-relations/diagnosis/:diagnosisId/prohibited - Prohibited Foods",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/diagnosis-food-relations/diagnosis/1/prohibited",
              "host": ["{{baseUrl}}"],
              "path": ["diagnosis-food-relations", "diagnosis", "1", "prohibited"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is JSON array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"All relations are prohibited\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    jsonData.forEach(relation => {",
                  "        pm.expect(relation.allowed).to.be.false;",
                  "    });",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Error Handling Tests",
      "item": [
        {
          "name": "Invalid Route - 404 Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/nonexistent-endpoint",
              "host": ["{{baseUrl}}"],
              "path": ["nonexistent-endpoint"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Invalid Method - 405 Test",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/diagnoses",
              "host": ["{{baseUrl}}"],
              "path": ["diagnoses"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 405 or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([404, 405]);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
